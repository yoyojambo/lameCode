// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package data

import (
	"context"
)

const getUsers = `-- name: GetUsers :many
SELECT id, username, password, created_at, updated_at FROM users ORDER BY username
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newUser = `-- name: NewUser :one

INSERT INTO users (username, password) VALUES (?, ?) RETURNING id
`

type NewUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// -- name: UpdateUserEmail :one
// UPDATE users SET
// email = sqlc.arg(email), updated_at = unixepoch()
// WHERE id = sqlc.arg(userId) RETURNING *;
func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, newUser, arg.Username, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users SET
password = ?1, updated_at = unixepoch()
WHERE id = ?2 RETURNING id, username, password, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	Newpassword string `json:"newpassword"`
	Userid      int64  `json:"userid"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.Newpassword, arg.Userid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
